package alarmitronbackend.UserAlarms;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

/**
 * class representing the alarms that each Alarmitron user can generate and 
 * store under their credentials
 * @author The Alarmitron Team
 *
 */
@Entity
@Table(name="UserAlarms")
public class UserAlarms {
	
	/**
	 * variable for the id of each alarm generated by a user
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer alarmID;
	
	/**
	 * string representing the time of the alarm in 24 hour format
	 */
	@NotFound(action = NotFoundAction.IGNORE)
	private String timeOfDay;
	
	/**
	 * string representing the days of the week
	 * that the user wants the alarm to ring
	 * 
	 * a day is represented by the first letter 
	 * of the word capitalized, weekdays if Mon-Fri is
	 * selected, weekends if Sat and Sun are selected, and
	 * everyday if every day is selected
	 */
	@NotFound(action = NotFoundAction.IGNORE)
	private String daysOfWeek;
	
	/**
	 * boolean for whether or not alarm should make 
	 * device vibrate
	 */
	@NotFound(action = NotFoundAction.IGNORE)
	private boolean vibration;
	
	/**
	 * boolean for whether or not snooze should be
	 * applied to alarm
	 */
	@NotFound(action = NotFoundAction.IGNORE)
	private boolean snooze;
	
	/**
	 * optional label for alarm set by user
	 */
	@NotFound(action = NotFoundAction.IGNORE)
	private String label;
	
	/**
	 * whether or not the alarm is active or not
	 */
	@NotFound(action = NotFoundAction.IGNORE)
	private boolean isEnabled;
	
	
	/**
	 * getter method for getting the ID of the alarm
	 * @return
	 * 		ID of alarm
	 */
	public Integer getAlarmID() {
        return this.alarmID;
    }
	
	/**
	 * setter method for setting the ID of the alarm
	 * @param id
	 * 		new ID for alarm
	 */
	public void setAlarmID(Integer id) {
        this.alarmID = id;
    }
	
	/**
	 * getter method that returns the time of day of the alarm
	 * @return
	 * 		string form of the time of day
	 */
	public String getTimeOfDay() {
        return this.timeOfDay;
    }
	
	/**
	 * setter method for updating the time of day of alarm
	 * @param time
	 * 		the new time of day that will replace the old
	 */
	public void setTimeOfDay(String time) {
        this.timeOfDay = time;
    }
	
	/**
	 * getter method for returning a 
	 * string representing the days of the
	 * week that the user wants the alarm to ring
	 * @return
	 * 		returns a string in the format of "MWF", for example, 
	 * 		for an alarm to ring Monday, Wednesday, and Friday
	 */
	public String getDaysOfWeek() {
		return this.daysOfWeek;
	}
	
	/**
	 * setter method for updating the amount of
	 * days the user wants their alarm to ring
	 * @param dow
	 * 		a string in the format of "MWF", for example, 
	 * 		for an alarm that should ring ever Monday, Wednesday, 
	 * 		and Friday
	 */
	public void setDaysOfWeek(String dow) {
		this.daysOfWeek = dow;
	}
	
	/**
	 * getter method for returning true if
	 * the alarm will vibrate or false if the 
	 * alarm will not vibrate when it goes off
	 * @return
	 * 		true if will vibrate, false otherwise
	 */
	public boolean getVibration() {
		return this.vibration;
	}
	
	/**
	 * setter method for whether or not device
	 * will vibrate once alarm goes off
	 * @param vibration
	 * 		if true, alarm will vibrate, false otherwise
	 */
	public void setVibration(boolean vibration) {
		this.vibration = vibration;
	}
	
	/**
	 * getter method that returns
	 * true if snooze is activated, false otherwise
	 * @return
	 * 		true if there is a snooze, false otherwise
	 */
	public boolean getSnooze() {
		return this.snooze;
	}
	
	/**
	 * setter method for whether or not 
	 * snooze is activated for the alarm
	 * @param snooze
	 * 		if true, there is a snooze time, false otherwise
	 */
	public void setSnooze(boolean snooze) {
		this.snooze = snooze;
	}
	
	/**
	 * getter method that returns the label associated with alarm
	 * @return
	 * 		string label that describes what the alarm is for
	 */
	public String getLabel() {
		return this.label;
	}
	
	/**
	 * setter method that updates the label of the alarm
	 * @param label
	 * 		string label that describes what alarm is for
	 */
	public void setLabel(String label) {
		this.label = label;
	}
	
	/**
	 * getter method that returns true if alarm is enabled, 
	 * false otherwise
	 * @return
	 * 		true if enabled, false otherwise
	 */
	public boolean getEnabledState() {
		return this.isEnabled;
	}
	
	/**
	 * setter method for whether or not alarm is enabled
	 * @param state
	 * 		if true, alarm is enabled, false otherwise
	 */
	public void setEnabledState(boolean state) {
		this.isEnabled = state;
	}
	
}
